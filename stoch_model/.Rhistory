# cutoff_time_wuhan <- max(case_data_wuhan_conf$date)
#
# for(ii in 1:length(date_range)){
#   case_data_wuhan_conf_time[ii] = sum(case_data_wuhan_conf[case_data_wuhan_conf$date==date_range[ii],]$number)
# }
#
# case_data_wuhan_conf_time[date_range>cutoff_time_wuhan] <- NA # omit all but single point
# Create flight prevalence series --------------------------------------------
date_flights_out_1_japan <- as.Date("2020-01-29")
date_flights_out_2_japan <- as.Date("2020-01-30")
date_flights_out_3_japan <- as.Date("2020-01-31")
date_flights_out_2_germany <- as.Date("2020-02-01")
flight_report <- rep(NA,length(date_range))
propn_flight_matrix <- matrix(NA,nrow=length(date_range),ncol=2)
flight_report[date_range == date_flights_out_1_japan |
date_range == date_flights_out_2_japan |
date_range == date_flights_out_3_japan |
date_range == date_flights_out_2_germany] <- 1
#proportion_on_flight <- c(10,750)
#prop_flight_1_japan <- c(3,206)
# combining the two japan flights on the same day
#prop_flight_1_japan <- c(8,565)
#prop_flight_2_japan <- c(4,296)
#prop_flight_1_japan <- c(12,861)
prop_flight_1_japan <- c(4,206)
prop_flight_2_japan <- c(2,210)
prop_flight_3_japan <- c(2,149)
prop_flight_2_germany <- c(2,120)
propn_flight_matrix[date_range==date_flights_out_1_japan,] <- prop_flight_1_japan
propn_flight_matrix[date_range==date_flights_out_2_japan,] <- prop_flight_2_japan
propn_flight_matrix[date_range==date_flights_out_3_japan,] <- prop_flight_3_japan
propn_flight_matrix[date_range==date_flights_out_2_germany,] <- prop_flight_2_germany
# Extract Feb Wuhan data --------------------------------------------------
cases_Wuhan <- data_hubei_Feb %>% filter(CNTY_CODE == 420100)
cases_Wuhan <-  cases_Wuhan %>% mutate(new_case = NA)
cases_Wuhan$new_case <- cases_Wuhan$total_case - c(NA,head(cases_Wuhan$total_case,-1))
case_data_wuhan_conf_time <- rep(NA,length(date_range))
cutoff_time_wuhan <- max(cases_Wuhan$date)
cutoff_min_wuhan <- as.Date("2020-01-21")
for(ii in 1:length(date_range)){
case_data_wuhan_conf_time[ii] = sum(cases_Wuhan[cases_Wuhan$date==date_range[ii],]$new_case)
}
case_data_wuhan_conf_time[date_range>cutoff_time_wuhan | date_range<cutoff_min_wuhan] <- NA # omit all old and recent points
# NEED REPORTING PARAMETER
# Compile list of data to use:
data_list <- list(local_case_data_onset = case_data_china_time, #case_data_china_time,  # case_data_wuhan_2_time
local_case_data_conf = case_data_wuhan_conf_time,
int_case_onset = case_data_onset_time,
int_case_conf = case_data_matrix,
int_case_onset_scale = case_data_scale,
local_case_data_onset_scale = case_data_wuhan_2_scale,
flight_info = flight_report,
flight_prop = propn_flight_matrix)
#data_list = list(local_case_data_tt=case_data_china_time[tt],case_data_tt=case_data_onset_time[tt],rep_data_tt=case_data_matrix[tt,])
plot_outputs(filename="1")
case_data
tail(case_data)
case_time
# tally cases
case_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_time[ii] = sum(case_data[case_data$date==date_range[ii],]$number)
}
case_time[date_range>=cutoff_case_int] <- NA # NOTE not used
length(date_range)
case_time
case_data
tail(case_data)
# nCoV stochastic model
# Main script
# Author: AJ Kucharski (2020)
# Set up libraries and paths ----------------------------------------------
library(foreach)
library(doMC)
library(lubridate)
library(magrittr)
library(coda)
library(tidyverse)
library(rootSolve)
registerDoMC(4)  #change the 2 to your number of CPU cores
rm(list=ls(all=TRUE))
# - - -
# Set user-specific directory path and load datasets
if(Sys.info()["user"]=="adamkuchars" | Sys.info()["user"]=="adamkucharski") {
setwd("~/Documents/GitHub/2020-nCov/stoch_model/")
dropbox_path <- ""
}
# Load datasets, functions and parameters ----------------------------------------------
# - - -
# Load datasets
travel_data_mobs <- read_csv(paste0(dropbox_path,"data/connectivity_data_mobs.csv"))
#travel_data_mobs <- read_csv(paste0(dropbox_path,"data/connectivity_data_worldpop.csv"))
international_conf_data_in <- read_csv(paste0(dropbox_path,"data/international_case_data.csv"))
international_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_WHO_report.csv"))
china_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_data_bioRvix_Liu_et_al.csv"))
wuhan_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_data_lancet_huang_et_al.csv"))
wuhan_onset_2020_01_30 <- read_csv(paste0(dropbox_path,"data/time_series_data_qui_li_nejm_wuhan.csv"))
wuhan_conf_data_in <- read_csv(paste0(dropbox_path,"data/time_series_HKU_Wuhan.csv"))
data_hubei_Feb <- read_csv(paste0(dropbox_path,"data/hubei_confirmed_cases.csv"))
case_data_in <- international_conf_data_in
travel_data <- travel_data_mobs
# - - -
# Load model and plotting functions
source("R/model_functions.R")
source("R/plotting_functions.R")
# - - -
# Load model parameters
thetaR_IC <- read_csv("inputs/theta_initial_conditions.csv")
theta <- c( r0=as.numeric(thetaR_IC[thetaR_IC$param=="r0","value"]), # note this is only IC - SMC estimates this
beta=NA,
betavol=as.numeric(thetaR_IC[thetaR_IC$param=="betavol","value"]),
gentime=as.numeric(thetaR_IC[thetaR_IC$param=="gentime","value"]), # not used currently
incubation = 1/as.numeric(thetaR_IC[thetaR_IC$param=="incubation","value"]),
report = 1/as.numeric(thetaR_IC[thetaR_IC$param=="report","value"]),
report_local = 1/as.numeric(thetaR_IC[thetaR_IC$param=="report_local","value"]),
recover = 1/as.numeric(thetaR_IC[thetaR_IC$param=="recover","value"]),
init_cases=as.numeric(thetaR_IC[thetaR_IC$param=="init_cases","value"]),
passengers=as.numeric(thetaR_IC[thetaR_IC$param=="outbound_travel","value"]),
pop_travel=as.numeric(thetaR_IC[thetaR_IC$param=="population_travel","value"]),
local_rep_prop=as.numeric(thetaR_IC[thetaR_IC$param=="local_rep_prop","value"]), # local propn reported
onset_prop=as.numeric(thetaR_IC[thetaR_IC$param=="onset_prop","value"]), # propn onsets known
onset_prop_int=as.numeric(thetaR_IC[thetaR_IC$param=="onset_prop_int","value"]), # propn onsets known internationally
confirmed_prop=as.numeric(thetaR_IC[thetaR_IC$param=="confirmed_prop","value"]), # propn confirmed reported
travel_frac=NA,
r0_decline =as.numeric(thetaR_IC[thetaR_IC$param=="r0_decline","value"]), # decline in R0 for scenario analysis
rep_local_var =as.numeric(thetaR_IC[thetaR_IC$param=="rep_local_var","value"]), # dispersion in local reporting confirmed cases
pre_symp =as.numeric(thetaR_IC[thetaR_IC$param=="pre_symp","value"]) # transmission in 2nd half of Erland period (binary term)
)
theta[["travel_frac"]] <- theta[["passengers"]]/theta[["pop_travel"]] # Estimate fraction that travel
theta[["beta"]] <- theta[["r0"]]*(theta[["recover"]]) # Scale initial value of R0
theta_initNames <- c("sus","tr_exp1","tr_exp2","exp1","exp2","inf1","inf2","tr_waiting","cases","reports","waiting_local","cases_local","reports_local") # also defines groups to use in model
# - - -
# Load timeseries -  specify travel data being used
# NOTE: USES REPORTING DELAY AS INPUT
source("R/load_timeseries_data.R",local=TRUE)
# Timeseries data
# Define values
pre_peak <- 3 # -1 is 2 before peak, 2 is 2 after
omit_recent <- 5
omit_conf <- 0
# Set up start/end dates
start_date <- as.Date("2019-11-22") # first case
#end_date <- max(case_data_in$date) # omit recent day?
end_date <- as.Date("2020-03-15") # period to forecast ahead
date_range <- seq(start_date,end_date,1)
# When restrictions started
wuhan_travel_restrictions <- as.Date("2020-01-23")
wuhan_travel_time <- as.numeric(wuhan_travel_restrictions - start_date + 1)
fix_r0_tt <- as.numeric(as.Date("2020-02-06") - 7 - start_date + 1) #as.numeric(wuhan_travel_restrictions - start_date + 1) # set noise = 0 after this period of fitting
# Only use top twenty exports
n_risk <- 20
travel_data <- travel_data[1:20,]
# Load international confirmation data --------------------------------------------
case_data <- case_data_in
cutoff_case_int <- max(case_data$date) - omit_conf # omit final days of time points
case_data$export_probability <- as.numeric(travel_data[match(case_data$country,travel_data$label),]$risk) # Add risk
case_data <- case_data[!is.na(case_data$export_probability),] # Only use available data
# tally cases
case_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_time[ii] = sum(case_data[case_data$date==date_range[ii],]$number)
}
case_time[date_range>=cutoff_case_int] <- NA # NOTE not used
# shift data into weeks
t_period <- as.numeric(end_date-start_date)+1
case_data <- case_data %>% mutate(time = as.numeric(date - start_date + 1))
# compile matrix of cases in top 30 risk locations
top_risk <- travel_data[1:n_risk,]
# Calculate exports by country
case_data_matrix <- matrix(0,nrow=t_period,ncol=n_risk)
match_list_cases <- match(case_data$country,top_risk$label)
for(ii in 1:nrow(case_data)){
case_data_matrix[case_data[ii,]$time,match_list_cases[ii]] <- case_data[ii,]$number # add detected cases
}
# Load international onset data --------------------------------------------
case_data_onset_report_date <- as.Date("2020-01-28")
case_data_onset <- international_onset_data_in
cutoff_time_int_onsets <- max(case_data_onset$date) #- omit_recent # omit final days of time points
case_data_onset[case_data_onset$date>cutoff_time_int_onsets,"number"] <- NA
case_data_onset_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_data_onset_time[ii] <- sum(case_data_onset[case_data_onset$date==date_range[ii],]$number)
}
case_data_onset_time[date_range>cutoff_time_int_onsets] <- NA # omit final points
case_data_scale <- rep(0,length(date_range))
case_data_scale <-1-exp(-pmax(0,case_data_onset_report_date - date_range + 1)*theta[["report"]])
# Load China onset data --------------------------------------------
case_data_china <- china_onset_data_in
cutoff_time_china <- max(case_data_china$date) - omit_recent # omit final days of time points
case_data_china[case_data_china$date>cutoff_time_china,"number"] <- NA
case_data_china_time <- rep(0,length(date_range))
# ensure final points are omitted
for(ii in 1:length(date_range)){
case_data_china_time[ii] <- sum(case_data_china[case_data_china$date==date_range[ii],]$number)
}
case_data_china_time[date_range>cutoff_time_china] <- NA # omit final points
# Load Wuhan early data --------------------------------------------
case_data_wuhan <- wuhan_onset_data_in
case_data_wuhan$number <- case_data_wuhan$number - case_data_wuhan$number_market # calculate non-market exposures
case_data_wuhan_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_data_wuhan_time[ii] = sum(case_data_wuhan[case_data_wuhan$date==date_range[ii],]$number)
}
# Quick plot
#plot(case_data_wuhan$date,case_data_wuhan$number,xlim=as.Date(c("2019-12-01","2020-01-25")),ylim=c(0,30)); points(case_data_china$date,case_data_china$number,col="blue")
# INITIAL APPROXIMATION -  ADD TOGETHER CHINA TIMESERIES
case_data_china_time <- case_data_china_time + case_data_wuhan_time
# Load Wuhan 2020-01-30 onset data --------------------------------------------
case_data_wuhan_2 <- wuhan_onset_2020_01_30
case_data_wuhan_2$number <- case_data_wuhan_2$number - case_data_wuhan_2$linked_to_market # remove market exposures
final_time_wuhan_2 <- max(case_data_wuhan_2$date) # find latest data point
case_data_wuhan_2_time <- rep(0,length(date_range))
# ensure final points are omitted
for(ii in 1:length(date_range)){
case_data_wuhan_2_time[ii] <- sum(case_data_wuhan_2[case_data_wuhan_2$date==date_range[ii],]$number)
}
# EDIT TO FIT DIFFERENT TIMESERIES
case_data_wuhan_2_time[(which(case_data_wuhan_2_time==max(case_data_wuhan_2_time))+pre_peak):length(date_range)] <- NA # only look at up to peak:
#case_data_wuhan_2_time[date_range>final_time_wuhan_2] <- NA # put NA at end of timeseries
# Create scaling vector for reporting lag
case_data_wuhan_2_scale <- rep(0,length(date_range))
case_data_wuhan_2_scale <-1-exp(-pmax(0,final_time_wuhan_2 - date_range + pre_peak)*theta[["report"]])
# Load Wuhan confirmed data --------------------------------------------
# case_data_wuhan_conf <- wuhan_conf_data_in
# case_data_wuhan_conf_time <- rep(0,length(date_range))
# cutoff_time_wuhan <- max(case_data_wuhan_conf$date)
#
# for(ii in 1:length(date_range)){
#   case_data_wuhan_conf_time[ii] = sum(case_data_wuhan_conf[case_data_wuhan_conf$date==date_range[ii],]$number)
# }
#
# case_data_wuhan_conf_time[date_range>cutoff_time_wuhan] <- NA # omit all but single point
# Create flight prevalence series --------------------------------------------
date_flights_out_1_japan <- as.Date("2020-01-29")
date_flights_out_2_japan <- as.Date("2020-01-30")
date_flights_out_3_japan <- as.Date("2020-01-31")
date_flights_out_2_germany <- as.Date("2020-02-01")
flight_report <- rep(NA,length(date_range))
propn_flight_matrix <- matrix(NA,nrow=length(date_range),ncol=2)
flight_report[date_range == date_flights_out_1_japan |
date_range == date_flights_out_2_japan |
date_range == date_flights_out_3_japan |
date_range == date_flights_out_2_germany] <- 1
#proportion_on_flight <- c(10,750)
#prop_flight_1_japan <- c(3,206)
# combining the two japan flights on the same day
#prop_flight_1_japan <- c(8,565)
#prop_flight_2_japan <- c(4,296)
#prop_flight_1_japan <- c(12,861)
prop_flight_1_japan <- c(4,206)
prop_flight_2_japan <- c(2,210)
prop_flight_3_japan <- c(2,149)
prop_flight_2_germany <- c(2,120)
propn_flight_matrix[date_range==date_flights_out_1_japan,] <- prop_flight_1_japan
propn_flight_matrix[date_range==date_flights_out_2_japan,] <- prop_flight_2_japan
propn_flight_matrix[date_range==date_flights_out_3_japan,] <- prop_flight_3_japan
propn_flight_matrix[date_range==date_flights_out_2_germany,] <- prop_flight_2_germany
# Extract Feb Wuhan data --------------------------------------------------
cases_Wuhan <- data_hubei_Feb %>% filter(CNTY_CODE == 420100)
cases_Wuhan <-  cases_Wuhan %>% mutate(new_case = NA)
cases_Wuhan$new_case <- cases_Wuhan$total_case - c(NA,head(cases_Wuhan$total_case,-1))
case_data_wuhan_conf_time <- rep(NA,length(date_range))
cutoff_time_wuhan <- max(cases_Wuhan$date)
cutoff_min_wuhan <- as.Date("2020-01-21")
for(ii in 1:length(date_range)){
case_data_wuhan_conf_time[ii] = sum(cases_Wuhan[cases_Wuhan$date==date_range[ii],]$new_case)
}
case_data_wuhan_conf_time[date_range>cutoff_time_wuhan | date_range<cutoff_min_wuhan] <- NA # omit all old and recent points
# NEED REPORTING PARAMETER
# Compile list of data to use:
data_list <- list(local_case_data_onset = case_data_china_time, #case_data_china_time,  # case_data_wuhan_2_time
local_case_data_conf = case_data_wuhan_conf_time,
int_case_onset = case_data_onset_time,
int_case_conf = case_data_matrix,
int_case_onset_scale = case_data_scale,
local_case_data_onset_scale = case_data_wuhan_2_scale,
flight_info = flight_report,
flight_prop = propn_flight_matrix)
#data_list = list(local_case_data_tt=case_data_china_time[tt],case_data_tt=case_data_onset_time[tt],rep_data_tt=case_data_matrix[tt,])
plot_outputs(filename="1")
case_time
case_data
tail)case_data
tail(case_data)
date_range
# tally cases
case_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_time[ii] = sum(case_data[case_data$date==date_range[ii],]$number)
}
case_time[date_range>=cutoff_case_int] <- NA # NOTE not used
case_time
cutoff_case_int
# Timeseries data
# Define values
pre_peak <- 3 # -1 is 2 before peak, 2 is 2 after
omit_recent <- 5
omit_conf <- 0
# Set up start/end dates
start_date <- as.Date("2019-11-22") # first case
#end_date <- max(case_data_in$date) # omit recent day?
end_date <- as.Date("2020-03-15") # period to forecast ahead
date_range <- seq(start_date,end_date,1)
# When restrictions started
wuhan_travel_restrictions <- as.Date("2020-01-23")
wuhan_travel_time <- as.numeric(wuhan_travel_restrictions - start_date + 1)
fix_r0_tt <- as.numeric(as.Date("2020-02-06") - 7 - start_date + 1) #as.numeric(wuhan_travel_restrictions - start_date + 1) # set noise = 0 after this period of fitting
# Only use top twenty exports
n_risk <- 20
travel_data <- travel_data[1:20,]
# Load international confirmation data --------------------------------------------
case_data <- case_data_in
cutoff_case_int <- max(case_data$date) - omit_conf # omit final days of time points
case_data$export_probability <- as.numeric(travel_data[match(case_data$country,travel_data$label),]$risk) # Add risk
case_data <- case_data[!is.na(case_data$export_probability),] # Only use available data
# tally cases
case_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_time[ii] = sum(case_data[case_data$date==date_range[ii],]$number)
}
case_time[date_range>cutoff_case_int] <- NA # NOTE not used
# shift data into weeks
t_period <- as.numeric(end_date-start_date)+1
case_data <- case_data %>% mutate(time = as.numeric(date - start_date + 1))
# compile matrix of cases in top 30 risk locations
top_risk <- travel_data[1:n_risk,]
# Calculate exports by country
case_data_matrix <- matrix(0,nrow=t_period,ncol=n_risk)
match_list_cases <- match(case_data$country,top_risk$label)
for(ii in 1:nrow(case_data)){
case_data_matrix[case_data[ii,]$time,match_list_cases[ii]] <- case_data[ii,]$number # add detected cases
}
# Load international onset data --------------------------------------------
case_data_onset_report_date <- as.Date("2020-01-28")
case_data_onset <- international_onset_data_in
cutoff_time_int_onsets <- max(case_data_onset$date) #- omit_recent # omit final days of time points
case_data_onset[case_data_onset$date>cutoff_time_int_onsets,"number"] <- NA
case_data_onset_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_data_onset_time[ii] <- sum(case_data_onset[case_data_onset$date==date_range[ii],]$number)
}
case_data_onset_time[date_range>cutoff_time_int_onsets] <- NA # omit final points
case_data_scale <- rep(0,length(date_range))
case_data_scale <-1-exp(-pmax(0,case_data_onset_report_date - date_range + 1)*theta[["report"]])
# Load China onset data --------------------------------------------
case_data_china <- china_onset_data_in
cutoff_time_china <- max(case_data_china$date) - omit_recent # omit final days of time points
case_data_china[case_data_china$date>cutoff_time_china,"number"] <- NA
case_data_china_time <- rep(0,length(date_range))
# ensure final points are omitted
for(ii in 1:length(date_range)){
case_data_china_time[ii] <- sum(case_data_china[case_data_china$date==date_range[ii],]$number)
}
case_data_china_time[date_range>cutoff_time_china] <- NA # omit final points
# Load Wuhan early data --------------------------------------------
case_data_wuhan <- wuhan_onset_data_in
case_data_wuhan$number <- case_data_wuhan$number - case_data_wuhan$number_market # calculate non-market exposures
case_data_wuhan_time <- rep(0,length(date_range))
for(ii in 1:length(date_range)){
case_data_wuhan_time[ii] = sum(case_data_wuhan[case_data_wuhan$date==date_range[ii],]$number)
}
# Quick plot
#plot(case_data_wuhan$date,case_data_wuhan$number,xlim=as.Date(c("2019-12-01","2020-01-25")),ylim=c(0,30)); points(case_data_china$date,case_data_china$number,col="blue")
# INITIAL APPROXIMATION -  ADD TOGETHER CHINA TIMESERIES
case_data_china_time <- case_data_china_time + case_data_wuhan_time
# Load Wuhan 2020-01-30 onset data --------------------------------------------
case_data_wuhan_2 <- wuhan_onset_2020_01_30
case_data_wuhan_2$number <- case_data_wuhan_2$number - case_data_wuhan_2$linked_to_market # remove market exposures
final_time_wuhan_2 <- max(case_data_wuhan_2$date) # find latest data point
case_data_wuhan_2_time <- rep(0,length(date_range))
# ensure final points are omitted
for(ii in 1:length(date_range)){
case_data_wuhan_2_time[ii] <- sum(case_data_wuhan_2[case_data_wuhan_2$date==date_range[ii],]$number)
}
# EDIT TO FIT DIFFERENT TIMESERIES
case_data_wuhan_2_time[(which(case_data_wuhan_2_time==max(case_data_wuhan_2_time))+pre_peak):length(date_range)] <- NA # only look at up to peak:
#case_data_wuhan_2_time[date_range>final_time_wuhan_2] <- NA # put NA at end of timeseries
# Create scaling vector for reporting lag
case_data_wuhan_2_scale <- rep(0,length(date_range))
case_data_wuhan_2_scale <-1-exp(-pmax(0,final_time_wuhan_2 - date_range + pre_peak)*theta[["report"]])
# Load Wuhan confirmed data --------------------------------------------
# case_data_wuhan_conf <- wuhan_conf_data_in
# case_data_wuhan_conf_time <- rep(0,length(date_range))
# cutoff_time_wuhan <- max(case_data_wuhan_conf$date)
#
# for(ii in 1:length(date_range)){
#   case_data_wuhan_conf_time[ii] = sum(case_data_wuhan_conf[case_data_wuhan_conf$date==date_range[ii],]$number)
# }
#
# case_data_wuhan_conf_time[date_range>cutoff_time_wuhan] <- NA # omit all but single point
# Create flight prevalence series --------------------------------------------
date_flights_out_1_japan <- as.Date("2020-01-29")
date_flights_out_2_japan <- as.Date("2020-01-30")
date_flights_out_3_japan <- as.Date("2020-01-31")
date_flights_out_2_germany <- as.Date("2020-02-01")
flight_report <- rep(NA,length(date_range))
propn_flight_matrix <- matrix(NA,nrow=length(date_range),ncol=2)
flight_report[date_range == date_flights_out_1_japan |
date_range == date_flights_out_2_japan |
date_range == date_flights_out_3_japan |
date_range == date_flights_out_2_germany] <- 1
#proportion_on_flight <- c(10,750)
#prop_flight_1_japan <- c(3,206)
# combining the two japan flights on the same day
#prop_flight_1_japan <- c(8,565)
#prop_flight_2_japan <- c(4,296)
#prop_flight_1_japan <- c(12,861)
prop_flight_1_japan <- c(4,206)
prop_flight_2_japan <- c(2,210)
prop_flight_3_japan <- c(2,149)
prop_flight_2_germany <- c(2,120)
propn_flight_matrix[date_range==date_flights_out_1_japan,] <- prop_flight_1_japan
propn_flight_matrix[date_range==date_flights_out_2_japan,] <- prop_flight_2_japan
propn_flight_matrix[date_range==date_flights_out_3_japan,] <- prop_flight_3_japan
propn_flight_matrix[date_range==date_flights_out_2_germany,] <- prop_flight_2_germany
# Extract Feb Wuhan data --------------------------------------------------
cases_Wuhan <- data_hubei_Feb %>% filter(CNTY_CODE == 420100)
cases_Wuhan <-  cases_Wuhan %>% mutate(new_case = NA)
cases_Wuhan$new_case <- cases_Wuhan$total_case - c(NA,head(cases_Wuhan$total_case,-1))
case_data_wuhan_conf_time <- rep(NA,length(date_range))
cutoff_time_wuhan <- max(cases_Wuhan$date)
cutoff_min_wuhan <- as.Date("2020-01-21")
for(ii in 1:length(date_range)){
case_data_wuhan_conf_time[ii] = sum(cases_Wuhan[cases_Wuhan$date==date_range[ii],]$new_case)
}
case_data_wuhan_conf_time[date_range>cutoff_time_wuhan | date_range<cutoff_min_wuhan] <- NA # omit all old and recent points
# NEED REPORTING PARAMETER
# Compile list of data to use:
data_list <- list(local_case_data_onset = case_data_china_time, #case_data_china_time,  # case_data_wuhan_2_time
local_case_data_conf = case_data_wuhan_conf_time,
int_case_onset = case_data_onset_time,
int_case_conf = case_data_matrix,
int_case_onset_scale = case_data_scale,
local_case_data_onset_scale = case_data_wuhan_2_scale,
flight_info = flight_report,
flight_prop = propn_flight_matrix)
#data_list = list(local_case_data_tt=case_data_china_time[tt],case_data_tt=case_data_onset_time[tt],rep_data_tt=case_data_matrix[tt,])
plot_outputs(filename="1")
filename="1"
#load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Get confirmed cases
Rep_plot_total <- colSums(Rep_plot)
#rep_CI <- apply(Rep_plot_total,1,function(x){quantile(x,c(0.025,0.5,0.975))})
rep_CI <- quantile(Rep_plot_total,c(0.025,0.5,0.975))
x_scaled <- rep_CI[2]
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}); #x_expected <- t(x_expected) # expected exported cases in each location
# Tally country cases
unique_country <- unique(case_data$country)
case_export_vector <- rep(0,nrow(top_risk))
for(ii in 1:nrow(top_risk)){
match_ID <- match(top_risk[ii,]$label,unique_country)
if(!is.na(match_ID)){
total_exports <- case_data %>% filter(country==unique_country[match_ID]) %>% select(number) %>% sum()
}else{
total_exports <- 0
}
case_export_vector[ii] <- total_exports
}
# Plot expected vs observed
#par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
par(mar=c(3,3,1,1))
ymax1 <- 12
plot(x_expected,case_export_vector,col="white",ylim=c(0,ymax1),xlim=c(0,ymax1),xlab="expected international exports from Wuhan",ylab="confirmed international exports")
lines(c(-10,20),c(-10,20),lty=2)
points(x_expected,case_export_vector,pch=1,col="blue",cex=0.7) #-- REMOVED TEMPORARILY
#text(labels="Australia",x=1.2,y=6,col="blue",adj=0)
#text(labels="USA",x=1.6,y=5,col="blue",adj=0)
#text(labels="France",x=0.4,y=3,col="blue",adj=0)
#text(labels="Thailand",x=3.9,y=3.7,col="blue",adj=0)
par(mar=c(2,3,1,1))
x_scaled
filename="1"
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Get confirmed cases
Rep_plot_total <- colSums(Rep_plot)
#rep_CI <- apply(Rep_plot_total,1,function(x){quantile(x,c(0.025,0.5,0.975))})
rep_CI <- quantile(Rep_plot_total,c(0.025,0.5,0.975))
x_scaled <- rep_CI[2]
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}); #x_expected <- t(x_expected) # expected exported cases in each location
# Tally country cases
unique_country <- unique(case_data$country)
case_export_vector <- rep(0,nrow(top_risk))
for(ii in 1:nrow(top_risk)){
match_ID <- match(top_risk[ii,]$label,unique_country)
if(!is.na(match_ID)){
total_exports <- case_data %>% filter(country==unique_country[match_ID]) %>% select(number) %>% sum()
}else{
total_exports <- 0
}
case_export_vector[ii] <- total_exports
}
# Plot expected vs observed
#par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
par(mar=c(3,3,1,1))
ymax1 <- 12
plot(x_expected,case_export_vector,col="white",ylim=c(0,ymax1),xlim=c(0,ymax1),xlab="expected international exports from Wuhan",ylab="confirmed international exports")
lines(c(-10,20),c(-10,20),lty=2)
points(x_expected,case_export_vector,pch=1,col="blue",cex=0.7) #-- REMOVED TEMPORARILY
#text(labels="Australia",x=1.2,y=6,col="blue",adj=0)
#text(labels="USA",x=1.6,y=5,col="blue",adj=0)
#text(labels="France",x=0.4,y=3,col="blue",adj=0)
#text(labels="Thailand",x=3.9,y=3.7,col="blue",adj=0)
par(mar=c(2,3,1,1))
# dev.copy(png,paste("plots/export_plot.png",sep=""),units="cm",width=15,height=10,res=150)
# dev.off()
names(theta)
MLE_check_2D(p1_name = "betavol", p2_name = "rep_local_var",
theta_tab1 = seq(0.1,0.6,0.6), theta_tab2 = seq(0.25,2,0.25),nn=1e3)
profile_plot(p1_name = "betavol", p2_name = "rep_local_var", filename=1)
MLE_check_2D(p1_name = "betavol", p2_name = "rep_local_var",
theta_tab1 = seq(0.1,0.6,0.1), theta_tab2 = seq(0.25,2,0.25),nn=1e3)
profile_plot(p1_name = "betavol", p2_name = "rep_local_var", filename=1)
