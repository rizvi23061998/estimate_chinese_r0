C_plot,
Rep_plot,
R0_plot,
file=paste0("outputs/bootstrap_fit_",filename,".RData"))
}
# Plot outputs from SMC --------------------------------------------
plot_outputs <- function(filename="1"){
cut_off <- 0
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Calculate quantiles
S_quantile <- apply(S_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))}) # thousands
Inf_quantile <- apply(I_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})/1e3 # thousands
# Local cases
Case_local_quantile <- apply(C_local_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
Case_local_quantile_onset <- theta[["onset_prop"]]*Case_local_quantile
Rep_local_quantile <- apply(Rep_local_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# International onset
Case_quantile <- apply(C_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# International confirmed
Rep_quantile <- apply(Rep_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
R0_quantile <- apply(R0_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# Remove final few points (as estimation less reliable)
S_quantileA <- S_quantile[,1:(ncol(R0_quantile)-cut_off)]/theta[["pop_travel"]]
Inf_quantileA <- Inf_quantile[,1:(ncol(R0_quantile)-cut_off)]
R0_quantileA <- R0_quantile[,1:(ncol(R0_quantile)-cut_off)]
date_rangeA <- date_range[1:(length(date_range)-cut_off)]
# - - - - - - -
# Calculate daily incidence
#Case_diff_quantile <- Case_quantile[,1:ncol(Case_quantile)] - cbind(c(0,0,0),Case_quantile[,1:(ncol(Case_quantile)-1)])
par(mfrow=c(3,2),mar=c(2,3,1,1),mgp=c(2,0.7,0))
# Plot outputs
a_col <- 0.4 # alpha
xMin1 <- min(as.Date("2019-12-01"))
xMin <- min(as.Date("2020-01-01"))
xMax <- max(date_range)
yMax <- max(Inf_quantileA[4,])
# Plot outputs
# Plot local cases onsets
ym1 <- 120
plot(date_range,Case_local_quantile_onset[1,],col="white",ylim=c(0,ym1),xlim=c(xMin1,xMax),xlab="",ylab="new onsets in Wuhan")
polygon(c(date_range,rev(date_range)),c(Case_local_quantile_onset[2,],rev(Case_local_quantile_onset[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Case_local_quantile_onset[1,],rev(Case_local_quantile_onset[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Case_local_quantile_onset[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
text(labels="travel restrictions",x=wuhan_travel_restrictions-0.5,y=0.9*ym1,adj=1,col="red")
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="fitted data",x=xMin1,y=0.8*ym1,adj=0,col="black")
#points(case_data_wuhan$date,case_data_wuhan$number,pch=17)
#points(case_data_china$date,case_data_china$number,pch=18)
points(date_range,case_data_wuhan_2_time,pch=19)
title(LETTERS[1],adj=0); letR = 2
# - - -
# Plot international cases onsets
ym1 <- 10
plot(date_range,case_time,pch=19,ylim=c(0,ym1),xlim=c(xMin1,xMax),ylab="new international onsets",col="white")
polygon(c(date_range,rev(date_range)),c(Case_quantile[2,],rev(Case_quantile[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Case_quantile[1,],rev(Case_quantile[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Case_quantile[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
points(date_range,case_data_onset_time,pch=19)
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="fitted data",x=xMin1,y=0.8*ym1,adj=0,col="black")
text(labels="travel restrictions",x=wuhan_travel_restrictions-0.5,y=0.8*ym1,adj=1,col="red")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
title(LETTERS[letR],adj=0); letR = letR +1
# - - -
# Plot local cases confirmed
# plot(date_range,case_time,pch=19,ylim=c(0,1000),xlim=c(xMin1,xMax),ylab="total cases confirmed in Wuhan",col="white")
#
# polygon(c(date_range,rev(date_range)),c(cumsum(Rep_local_quantile[2,]),rev(cumsum(Rep_local_quantile[4,]))),lty=0,col=rgb(0,0.3,1,0.35))
# polygon(c(date_range,rev(date_range)),c(cumsum(Rep_local_quantile[1,]),rev(cumsum(Rep_local_quantile[5,]))),lty=0,col=rgb(0,0.3,1,0.2))
# lines(date_range,cumsum(Rep_local_quantile[3,]),type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
# points(date_range,case_data_wuhan_conf_time)
#
# text(labels="model estimate",x=xMin1,y=0.9*1e3,adj=0,col="blue")
# text(labels="non-fitted data (used for validation)",x=xMin1,y=0.8*1e3,adj=0,col="black")
#
# lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
# Plot international cases confirmed
ym1 <- 10
plot(date_range,case_time,pch=19,ylim=c(0,ym1),xlim=c(xMin1,xMax),ylab="new international cases confirmed",col="white")
polygon(c(date_range,rev(date_range)),c(Rep_quantile[2,],rev(Rep_quantile[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Rep_quantile[1,],rev(Rep_quantile[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Rep_quantile[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
points(date_range,case_time,pch=1)
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="non-fitted data (used for validation)",x=xMin1,y=0.8*ym1,adj=0,col="black")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
title(LETTERS[letR],adj=0); letR = letR +1
# Plot international confirmations
plot_international(Rep_plot)
title(LETTERS[letR],adj=0); letR = letR +1
# Plot estimated local infections
plot(date_rangeA,Inf_quantileA[1,],col="white",ylim=c(0,1.2*yMax),xlim=c(xMin1,xMax),xlab="",ylab="prevalence in Wuhan (thousands)")
polygon(c(date_rangeA,rev(date_rangeA)),c(Inf_quantileA[2,],rev(Inf_quantileA[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_rangeA,rev(date_rangeA)),c(Inf_quantileA[1,],rev(Inf_quantileA[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_rangeA,Inf_quantileA[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
text(labels="model estimate",x=xMin1,y=1.1*yMax,adj=0,col="blue")
title(LETTERS[letR],adj=0); letR = letR + 1
# Plot reproduction number
plot(date_rangeA,R0_quantileA[1,],col="white",ylim=c(0,10),xlim=c(xMin1,xMax),xlab="",ylab=expression(paste(R[t])))
polygon(c(date_rangeA,rev(date_rangeA)),c(R0_quantileA[2,],rev(R0_quantileA[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_rangeA,rev(date_rangeA)),c(R0_quantileA[1,],rev(R0_quantileA[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_rangeA,R0_quantileA[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(date_rangeA,1+0*R0_quantileA[3,],lty=2)
text(labels="model estimate",x=xMin1,y=9,adj=0,col="blue")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,10),col="red")
title(LETTERS[letR],adj=0); letR = letR +
# output figure
dev.copy(png,paste("plots/cases_inference.png",sep=""),units="cm",width=20,height=15,res=150)
#dev.copy(pdf,paste("plots/cases_inference.pdf",sep=""),width=8,height=8)
dev.off()
}
# Plot international cumulative --------------------------------------------
plot_international <- function(Rep_plot){
# filename="1"
#load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Get confirmed cases
Rep_plot_total <- colSums(Rep_plot)
#rep_CI <- apply(Rep_plot_total,1,function(x){quantile(x,c(0.025,0.5,0.975))})
rep_CI <- quantile(Rep_plot_total,c(0.025,0.5,0.975))
x_scaled <- rep_CI[2]
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}); #x_expected <- t(x_expected) # expected exported cases in each location
# Tally country cases
unique_country <- unique(case_data$country)
case_export_vector <- rep(0,nrow(top_risk))
for(ii in 1:nrow(top_risk)){
match_ID <- match(top_risk[ii,]$label,unique_country)
if(!is.na(match_ID)){
total_exports <- case_data %>% filter(country==unique_country[match_ID]) %>% select(number) %>% sum()
}else{
total_exports <- 0
}
case_export_vector[ii] <- total_exports
}
# Plot expected vs observed
#par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
par(mar=c(3,3,1,1))
plot(x_expected,case_export_vector,col="white",ylim=c(0,6),xlim=c(0,6),xlab="expected international cases",ylab="confirmed international cases")
lines(c(-10,10),c(-10,10),lty=2)
points(x_expected,case_export_vector,pch=1,col="blue",cex=0.7)
text(labels="Australia",x=1,y=6,col="blue",adj=0)
text(labels="USA",x=1.4,y=5,col="blue",adj=0)
text(labels="France",x=0.3,y=3,col="blue",adj=0)
text(labels="Thailand",x=3.2,y=4.3,col="blue",adj=0)
par(mar=c(2,3,1,1))
# dev.copy(png,paste("plots/export_plot.png",sep=""),units="cm",width=15,height=10,res=150)
# dev.off()
#
}
# Plot dispersion --------------------------------------------
plot_dispersion <- function(filename="1"){
# filename="1"
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Extract R credible interval
period_interest <- as.Date(c("2020-01-10","2020-01-14"))
par(mfrow=c(1,2),mar=c(3,3,1,1),mgp=c(2,0.7,0))
for(ii in 1:2){
index_pick <- match(period_interest,date_range)
R0_all <- R0_plot[index_pick[ii],]
dim(R0_all) <- NULL # collapse data
R0_CrI <- quantile(R0_all,c(0.025,0.25,0.5,0.75,0.975))
MERS_k <- 0.26
SARS_k <- 0.16
k_seq <- seq(0.01,0.5,0.01)
# Outbreak calcs
R0_med <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[3],x)})
R0_CrI_1 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[1],x)})
R0_CrI_2 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[5],x)})
R0_CrI_1_50 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[2],x)})
R0_CrI_2_50 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[4],x)})
# Plot results
plot(k_seq,R0_med,type="l",ylim=c(0,1),xlab=c("extent of homogeneity in transmission (k)"),ylab="probability of large outbreak",col="white",xaxs="i",yaxs="i")
polygon(c(k_seq,rev(k_seq)),c(R0_CrI_1,rev(R0_CrI_2)),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(k_seq,rev(k_seq)),c(R0_CrI_1_50,rev(R0_CrI_2_50)),lty=0,col=rgb(0,0.3,1,0.35))
lines(k_seq,R0_med,col="blue")
lines(c(MERS_k,MERS_k),c(-1,10),lty=2); text(labels="MERS-CoV",x=1.02*MERS_k,y=0.7,adj=0,col="black")
lines(c(SARS_k,SARS_k),c(-1,10),lty=2); text(labels="SARS",x=1.02*SARS_k,y=0.6,adj=0,col="black")
title(LETTERS[ii],adj=0)
}
dev.copy(png,paste("plots/calc_1.png",sep=""),units="cm",width=20,height=10,res=150)
dev.off()
}
# Output R0 estimates over time --------------------------------------------
r0_value_output <- function(filename="1"){
# filename="1"
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
period_interest <- as.Date("2020-01-01","")
match(period_interest,date_range)
R0_plot
# TO FINISH
}
# Exporter case scaling function --------------------------------------------
fit_int_cases <- function(x_val){
x_scaled <- x_val #* passengers_daily / wuhan_area
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}) %>% t() # expected exported cases in each location
x_lambda <- rowSums(x_expected)
#x_lambda
rpois(length(x_lambda),lambda=x_lambda)
}
# Output plots
plot_outputs(filename="1")
# Helper functions --------------------------------------------
c.text<-function(x,sigF=3){
bp1=signif(c(median(x),quantile(x,0.025),quantile(x,0.975)),sigF)
paste(bp1[1]," (",bp1[2],"-",bp1[3],")",sep="")
}
c.nume<-function(x){
bp1=c(median(x),quantile(x,0.025),quantile(x,0.975))
as.numeric(bp1)
}
# Run SMC to get bootstrap estimates --------------------------------------------
run_fits <- function(rep_plot,nn,cut_off,dt,filename="1"){
# rep_plot <- 10; nn <- 100; cut_off=0
S_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
I_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
C_local_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
Rep_local_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
C_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
Rep_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
R0_plot = matrix(NA,ncol=rep_plot,nrow=t_period)
for(kk in 1:rep_plot){
output_smc <- smc_model(theta,nn,dt)
I_plot[,kk] <- output_smc$I_trace
S_plot[,kk] <- output_smc$S_trace
case_local_pos <- theta[["local_rep_prop"]]*(output_smc$C_local_trace - c(0,head(output_smc$C_local_trace,-1)))
C_local_plot[,kk] <- rpois(length(case_local_pos),lambda=case_local_pos)
rep_local_pos <- theta[["local_rep_prop"]]*(output_smc$Rep_local_trace - c(0,head(output_smc$Rep_local_trace,-1)))
Rep_local_plot[,kk] <- rpois(length(rep_local_pos),lambda=rep_local_pos)
C_plot[,kk] <- fit_int_cases(output_smc$C_trace - c(0,head(output_smc$C_trace,-1)))
Rep_plot[,kk] <- fit_int_cases(output_smc$Rep_trace - c(0,head(output_smc$Rep_trace,-1))) # case difference
R0_plot[,kk] <- output_smc$beta_trace/(theta[["recover"]])
}
save(
S_plot,
I_plot,
C_local_plot,
Rep_local_plot,
C_plot,
Rep_plot,
R0_plot,
file=paste0("outputs/bootstrap_fit_",filename,".RData"))
}
# Plot outputs from SMC --------------------------------------------
plot_outputs <- function(filename="1"){
cut_off <- 0
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Calculate quantiles
S_quantile <- apply(S_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))}) # thousands
Inf_quantile <- apply(I_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})/1e3 # thousands
# Local cases
Case_local_quantile <- apply(C_local_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
Case_local_quantile_onset <- theta[["onset_prop"]]*Case_local_quantile
Rep_local_quantile <- apply(Rep_local_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# International onset
Case_quantile <- apply(C_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# International confirmed
Rep_quantile <- apply(Rep_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
R0_quantile <- apply(R0_plot,1,function(x){quantile(x,c(0.025,0.25,0.5,0.75,0.975))})
# Remove final few points (as estimation less reliable)
S_quantileA <- S_quantile[,1:(ncol(R0_quantile)-cut_off)]/theta[["pop_travel"]]
Inf_quantileA <- Inf_quantile[,1:(ncol(R0_quantile)-cut_off)]
R0_quantileA <- R0_quantile[,1:(ncol(R0_quantile)-cut_off)]
date_rangeA <- date_range[1:(length(date_range)-cut_off)]
# - - - - - - -
# Calculate daily incidence
#Case_diff_quantile <- Case_quantile[,1:ncol(Case_quantile)] - cbind(c(0,0,0),Case_quantile[,1:(ncol(Case_quantile)-1)])
par(mfrow=c(3,2),mar=c(2,3,1,1),mgp=c(2,0.7,0))
# Plot outputs
a_col <- 0.4 # alpha
xMin1 <- min(as.Date("2019-12-01"))
xMin <- min(as.Date("2020-01-01"))
xMax <- max(date_range)
yMax <- max(Inf_quantileA[4,])
# Plot outputs
# Plot local cases onsets
ym1 <- 120
plot(date_range,Case_local_quantile_onset[1,],col="white",ylim=c(0,ym1),xlim=c(xMin1,xMax),xlab="",ylab="new onsets in Wuhan")
polygon(c(date_range,rev(date_range)),c(Case_local_quantile_onset[2,],rev(Case_local_quantile_onset[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Case_local_quantile_onset[1,],rev(Case_local_quantile_onset[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Case_local_quantile_onset[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
text(labels="travel restrictions",x=wuhan_travel_restrictions-0.5,y=0.9*ym1,adj=1,col="red")
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="fitted data",x=xMin1,y=0.8*ym1,adj=0,col="black")
#points(case_data_wuhan$date,case_data_wuhan$number,pch=17)
#points(case_data_china$date,case_data_china$number,pch=18)
points(date_range,case_data_wuhan_2_time,pch=19)
title(LETTERS[1],adj=0); letR = 2
# - - -
# Plot international cases onsets
ym1 <- 10
plot(date_range,case_time,pch=19,ylim=c(0,ym1),xlim=c(xMin1,xMax),ylab="new international onsets",col="white")
polygon(c(date_range,rev(date_range)),c(Case_quantile[2,],rev(Case_quantile[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Case_quantile[1,],rev(Case_quantile[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Case_quantile[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
points(date_range,case_data_onset_time,pch=19)
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="fitted data",x=xMin1,y=0.8*ym1,adj=0,col="black")
text(labels="travel restrictions",x=wuhan_travel_restrictions-0.5,y=0.8*ym1,adj=1,col="red")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
title(LETTERS[letR],adj=0); letR = letR +1
# - - -
# Plot local cases confirmed
# plot(date_range,case_time,pch=19,ylim=c(0,1000),xlim=c(xMin1,xMax),ylab="total cases confirmed in Wuhan",col="white")
#
# polygon(c(date_range,rev(date_range)),c(cumsum(Rep_local_quantile[2,]),rev(cumsum(Rep_local_quantile[4,]))),lty=0,col=rgb(0,0.3,1,0.35))
# polygon(c(date_range,rev(date_range)),c(cumsum(Rep_local_quantile[1,]),rev(cumsum(Rep_local_quantile[5,]))),lty=0,col=rgb(0,0.3,1,0.2))
# lines(date_range,cumsum(Rep_local_quantile[3,]),type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
# points(date_range,case_data_wuhan_conf_time)
#
# text(labels="model estimate",x=xMin1,y=0.9*1e3,adj=0,col="blue")
# text(labels="non-fitted data (used for validation)",x=xMin1,y=0.8*1e3,adj=0,col="black")
#
# lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
# Plot international cases confirmed
ym1 <- 10
plot(date_range,case_time,pch=19,ylim=c(0,ym1),xlim=c(xMin1,xMax),ylab="new international cases confirmed",col="white")
polygon(c(date_range,rev(date_range)),c(Rep_quantile[2,],rev(Rep_quantile[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_range,rev(date_range)),c(Rep_quantile[1,],rev(Rep_quantile[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_range,Rep_quantile[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
points(date_range,case_time,pch=1)
text(labels="model estimate",x=xMin1,y=0.9*ym1,adj=0,col="blue")
text(labels="non-fitted data (used for validation)",x=xMin1,y=0.8*ym1,adj=0,col="black")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
title(LETTERS[letR],adj=0); letR = letR +1
# Plot international confirmations
plot_international(Rep_plot)
title(LETTERS[letR],adj=0); letR = letR +1
# Plot estimated local infections
plot(date_rangeA,Inf_quantileA[1,],col="white",ylim=c(0,1.2*yMax),xlim=c(xMin1,xMax),xlab="",ylab="prevalence in Wuhan (thousands)")
polygon(c(date_rangeA,rev(date_rangeA)),c(Inf_quantileA[2,],rev(Inf_quantileA[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_rangeA,rev(date_rangeA)),c(Inf_quantileA[1,],rev(Inf_quantileA[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_rangeA,Inf_quantileA[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,1e6),col="red")
text(labels="model estimate",x=xMin1,y=1.1*yMax,adj=0,col="blue")
title(LETTERS[letR],adj=0); letR = letR + 1
# Plot reproduction number
plot(date_rangeA,R0_quantileA[1,],col="white",ylim=c(0,10),xlim=c(xMin1,xMax),xlab="",ylab=expression(paste(R[t])))
polygon(c(date_rangeA,rev(date_rangeA)),c(R0_quantileA[2,],rev(R0_quantileA[4,])),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(date_rangeA,rev(date_rangeA)),c(R0_quantileA[1,],rev(R0_quantileA[5,])),lty=0,col=rgb(0,0.3,1,0.2))
lines(date_rangeA,R0_quantileA[3,],type="l",col=rgb(0,0,1),xaxt="n",yaxt="n",xlab="",ylab="")
lines(date_rangeA,1+0*R0_quantileA[3,],lty=2)
text(labels="model estimate",x=xMin1,y=9,adj=0,col="blue")
lines(c(wuhan_travel_restrictions,wuhan_travel_restrictions),c(0,10),col="red")
title(LETTERS[letR],adj=0); letR = letR +
# output figure
dev.copy(png,paste("plots/cases_inference.png",sep=""),units="cm",width=20,height=15,res=150)
#dev.copy(pdf,paste("plots/cases_inference.pdf",sep=""),width=8,height=8)
dev.off()
}
# Plot international cumulative --------------------------------------------
plot_international <- function(Rep_plot){
# filename="1"
#load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Get confirmed cases
Rep_plot_total <- colSums(Rep_plot)
#rep_CI <- apply(Rep_plot_total,1,function(x){quantile(x,c(0.025,0.5,0.975))})
rep_CI <- quantile(Rep_plot_total,c(0.025,0.5,0.975))
x_scaled <- rep_CI[2]
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}); #x_expected <- t(x_expected) # expected exported cases in each location
# Tally country cases
unique_country <- unique(case_data$country)
case_export_vector <- rep(0,nrow(top_risk))
for(ii in 1:nrow(top_risk)){
match_ID <- match(top_risk[ii,]$label,unique_country)
if(!is.na(match_ID)){
total_exports <- case_data %>% filter(country==unique_country[match_ID]) %>% select(number) %>% sum()
}else{
total_exports <- 0
}
case_export_vector[ii] <- total_exports
}
# Plot expected vs observed
#par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
par(mar=c(3,3,1,1))
plot(x_expected,case_export_vector,col="white",ylim=c(0,6),xlim=c(0,6),xlab="expected international cases from Wuhan",ylab="confirmed international cases")
lines(c(-10,10),c(-10,10),lty=2)
points(x_expected,case_export_vector,pch=1,col="blue",cex=0.7)
text(labels="Australia",x=1,y=6,col="blue",adj=0)
text(labels="USA",x=1.4,y=5,col="blue",adj=0)
text(labels="France",x=0.3,y=3,col="blue",adj=0)
text(labels="Thailand",x=3.2,y=4.4,col="blue",adj=0)
par(mar=c(2,3,1,1))
# dev.copy(png,paste("plots/export_plot.png",sep=""),units="cm",width=15,height=10,res=150)
# dev.off()
#
}
# Plot dispersion --------------------------------------------
plot_dispersion <- function(filename="1"){
# filename="1"
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
# Extract R credible interval
period_interest <- as.Date(c("2020-01-10","2020-01-14"))
par(mfrow=c(1,2),mar=c(3,3,1,1),mgp=c(2,0.7,0))
for(ii in 1:2){
index_pick <- match(period_interest,date_range)
R0_all <- R0_plot[index_pick[ii],]
dim(R0_all) <- NULL # collapse data
R0_CrI <- quantile(R0_all,c(0.025,0.25,0.5,0.75,0.975))
MERS_k <- 0.26
SARS_k <- 0.16
k_seq <- seq(0.01,0.5,0.01)
# Outbreak calcs
R0_med <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[3],x)})
R0_CrI_1 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[1],x)})
R0_CrI_2 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[5],x)})
R0_CrI_1_50 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[2],x)})
R0_CrI_2_50 <- 1-sapply(k_seq,function(x){numerical_solver(R0_CrI[4],x)})
# Plot results
plot(k_seq,R0_med,type="l",ylim=c(0,1),xlab=c("extent of homogeneity in transmission (k)"),ylab="probability of large outbreak",col="white",xaxs="i",yaxs="i")
polygon(c(k_seq,rev(k_seq)),c(R0_CrI_1,rev(R0_CrI_2)),lty=0,col=rgb(0,0.3,1,0.35))
polygon(c(k_seq,rev(k_seq)),c(R0_CrI_1_50,rev(R0_CrI_2_50)),lty=0,col=rgb(0,0.3,1,0.35))
lines(k_seq,R0_med,col="blue")
lines(c(MERS_k,MERS_k),c(-1,10),lty=2); text(labels="MERS-CoV",x=1.02*MERS_k,y=0.7,adj=0,col="black")
lines(c(SARS_k,SARS_k),c(-1,10),lty=2); text(labels="SARS",x=1.02*SARS_k,y=0.6,adj=0,col="black")
title(LETTERS[ii],adj=0)
}
dev.copy(png,paste("plots/calc_1.png",sep=""),units="cm",width=20,height=10,res=150)
dev.off()
}
# Output R0 estimates over time --------------------------------------------
r0_value_output <- function(filename="1"){
# filename="1"
load(paste0("outputs/bootstrap_fit_",filename,".RData"))
period_interest <- as.Date("2020-01-01","")
match(period_interest,date_range)
R0_plot
# TO FINISH
}
# Exporter case scaling function --------------------------------------------
fit_int_cases <- function(x_val){
x_scaled <- x_val #* passengers_daily / wuhan_area
x_expected <- sapply(x_scaled,function(x){x*as.numeric(top_risk$risk)}) %>% t() # expected exported cases in each location
x_lambda <- rowSums(x_expected)
#x_lambda
rpois(length(x_lambda),lambda=x_lambda)
}
# Output plots
plot_outputs(filename="1")
# nCoV stochastic model
# Main script
# Author: AJ Kucharski (2020)
# Set up libraries and paths ----------------------------------------------
library(foreach)
library(doMC)
library(lubridate)
library(magrittr)
library(coda)
library(tidyverse)
library(rootSolve)
registerDoMC(4)  #change the 2 to your number of CPU cores
rm(list=ls(all=TRUE))
# - - -
# Set user-specific directory path and load datasets
if(Sys.info()["user"]=="adamkuchars" | Sys.info()["user"]=="adamkucharski") {
setwd("~/Documents/GitHub/2020-nCov/stoch_model/")
dropbox_path <- ""
}
# Load datasets, functions and parameters ----------------------------------------------
# - - -
# Load datasets
travel_data_mobs <- read_csv(paste0(dropbox_path,"data/connectivity_data_mobs.csv"))
international_conf_data_in <- read_csv(paste0(dropbox_path,"data/international_case_data.csv"))
international_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_WHO_report.csv"))
china_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_data_bioRvix_Liu_et_al.csv"))
wuhan_onset_data_in <- read_csv(paste0(dropbox_path,"data/time_series_data_lancet_huang_et_al.csv"))
wuhan_onset_2020_01_30 <- read_csv(paste0(dropbox_path,"data/time_series_data_qui_li_nejm_wuhan.csv"))
wuhan_conf_data_in <- read_csv(paste0(dropbox_path,"data/time_series_HKU_Wuhan.csv"))
case_data_in <- international_conf_data_in
travel_data <- travel_data_mobs
# - - -
# Load model and plotting functions
source("R/model_functions.R")
source("R/plotting_functions.R")
# - - -
# Load model parameters
thetaR_IC <- read_csv("inputs/theta_initial_conditions.csv")
theta <- c( r0=as.numeric(thetaR_IC[thetaR_IC$param=="r0","value"]), # note this is only IC - SMC estimates this
beta=NA,
betavol=as.numeric(thetaR_IC[thetaR_IC$param=="betavol","value"]),
gentime=as.numeric(thetaR_IC[thetaR_IC$param=="gentime","value"]), # not used currently
incubation = 1/as.numeric(thetaR_IC[thetaR_IC$param=="incubation","value"]),
report = 1/as.numeric(thetaR_IC[thetaR_IC$param=="report","value"]),
report_local = 1/as.numeric(thetaR_IC[thetaR_IC$param=="report_local","value"]),
recover = 1/as.numeric(thetaR_IC[thetaR_IC$param=="recover","value"]),
init_cases=as.numeric(thetaR_IC[thetaR_IC$param=="init_cases","value"]),
passengers=as.numeric(thetaR_IC[thetaR_IC$param=="outbound_travel","value"]),
pop_travel=as.numeric(thetaR_IC[thetaR_IC$param=="population_travel","value"]),
local_rep_prop=as.numeric(thetaR_IC[thetaR_IC$param=="local_rep_prop","value"]), # local propn reported
onset_prop=as.numeric(thetaR_IC[thetaR_IC$param=="onset_prop","value"]), # propn onsets known
travel_frac=NA
)
#222.0734
theta[["travel_frac"]] <- theta[["passengers"]]/theta[["pop_travel"]] # Estimate fraction that travel
theta[["betavol"]] <- 0.5
theta[["beta"]] <- theta[["r0"]]*(theta[["recover"]]) # Scale initial value of R0
theta_initNames <- c("sus","tr_exp1","tr_exp2","exp1","exp2","inf1","inf2","tr_waiting","cases","reports","waiting_local","cases_local","reports_local") # also defines groups to use in model
# - - -
# Load timeseries -  specify travel data being used
# NOTE: USES REPORTING DELAY AS INPUT
source("R/load_timeseries_data.R",local=TRUE)
# Run set up check --------------------------------------------------------------
# - - -
# Run SMC and check likelihood
output_smc <- smc_model(theta,
nn=1e3, # number of particles
dt=0.25
)
output_smc$lik
# Run main outputs --------------------------------------------------------------
source("R/outputs_main.R")
